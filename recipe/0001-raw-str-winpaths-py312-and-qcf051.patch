From 7e80af7a4bfdb44b59af401ec2133ea99f380ac3 Mon Sep 17 00:00:00 2001
From: "Lori A. Burns" <lori.burns@gmail.com>
Date: Tue, 24 Oct 2023 16:49:13 -0400
Subject: [PATCH] raw strings for py312, qcvars for qcfractal051, (partial
 #3049)

---
 psi4/__init__.py         | 20 ++++++++++----------
 psi4/driver/task_base.py | 25 ++++++++++++++++++++++++-
 psi4/run_psi4.py         | 14 +++++++-------
 3 files changed, 41 insertions(+), 18 deletions(-)

diff --git a/psi4/__init__.py b/psi4/__init__.py
index 656ed318d..5b34b19d5 100644
--- a/psi4/__init__.py
+++ b/psi4/__init__.py
@@ -35,11 +35,11 @@ import os
 from pathlib import Path
 psi4_module_loc = Path(__file__).resolve().parent
 
-prefix = Path("@CMAKE_INSTALL_PREFIX@".replace("\\", "/"))
-cmake_install_bindir = "@CMAKE_INSTALL_BINDIR@".replace("\\", "/")
-cmake_install_datadir = "@CMAKE_INSTALL_DATADIR@".replace("\\", "/")
-cmake_install_libdir = "@CMAKE_INSTALL_LIBDIR@".replace("\\", "/")
-pymod_install_libdir = "@PYMOD_INSTALL_LIBDIR@".lstrip("/")
+prefix = Path(r"@CMAKE_INSTALL_PREFIX@".replace("\\", "/"))
+cmake_install_bindir = r"@CMAKE_INSTALL_BINDIR@".replace("\\", "/")
+cmake_install_datadir = r"@CMAKE_INSTALL_DATADIR@".replace("\\", "/")
+cmake_install_libdir = r"@CMAKE_INSTALL_LIBDIR@".replace("\\", "/")
+pymod_install_libdir = r"@PYMOD_INSTALL_LIBDIR@".lstrip("/")
 full_pymod = (prefix / cmake_install_libdir / pymod_install_libdir / "psi4").resolve()
 full_data = prefix / cmake_install_datadir / "psi4"
 full_bin = prefix / cmake_install_bindir
@@ -47,7 +47,7 @@ rel_data = os.path.relpath(full_data, start=full_pymod)
 rel_bin = os.path.relpath(full_bin, start=full_pymod)
 
 executable = psi4_module_loc.joinpath(rel_bin, "psi4")
-executable_exe = (Path("/opt/anaconda1anaconda2anaconda3") / "Scripts" / "psi4.exe").resolve(strict=False)
+executable_exe = (Path(r"/opt/anaconda1anaconda2anaconda3") / "Scripts" / "psi4.exe").resolve(strict=False)
 if executable_exe.exists():
     # Win conda-build generates this unbeknownst to CMake
     executable = executable_exe
@@ -107,13 +107,13 @@ from psi4.core import variable, set_variable
 #   rather than letting PYTHONPATH rule for the few.
 import sys
 if "@ENABLE_PCMSolver@".upper() in ["1", "ON", "YES", "TRUE", "Y"]:  # PCMSolver
-    sys.path.insert(1, "@PCMSolver_PYMOD@")
+    sys.path.insert(1, r"@PCMSolver_PYMOD@")
 if "@ENABLE_cppe@".upper() in ["1", "ON", "YES", "TRUE", "Y"]:  # cppe
-    sys.path.insert(1, "@cppe_PYMOD@")
+    sys.path.insert(1, r"@cppe_PYMOD@")
 if "@ENABLE_ddx@".upper() in ["1", "ON", "YES", "TRUE", "Y"]:  # pyddx
-    sys.path.insert(1, "@pyddx_PYMOD@")
+    sys.path.insert(1, r"@pyddx_PYMOD@")
 if "@ENABLE_libefp@".upper() in ["1", "ON", "YES", "TRUE", "Y"]:  # pylibefp
-    sys.path.insert(1, "@pylibefp_PYMOD@")
+    sys.path.insert(1, r"@pylibefp_PYMOD@")
 
 # Create a custom logger
 import logging
diff --git a/psi4/driver/task_base.py b/psi4/driver/task_base.py
index 7a90196f0..07000ff6c 100644
--- a/psi4/driver/task_base.py
+++ b/psi4/driver/task_base.py
@@ -271,10 +271,33 @@ def _singlepointrecord_to_atomicresult(spr: "qcportal.singlepoint.SinglepointRec
     # QCFractal `next` database stores return_result, properties, and extras["qcvars"] merged
     #   together and with lowercase keys. `to_qcschema_result` partitions properties back out,
     #   but we need to restore qcvars keys, types, and dimensions.
+    # QCFractal v0.51 starts saving space by removing qcvars whose qcvar.lower().replace(" ", "_")
+    #   are defined, so we also need to reconstruct these.
+    shared_qcvars = {}
+    for pv, dpv in atres.properties.dict().items():
+        if dpv is None:
+            continue
+        if pv.startswith("return_") or pv.endswith("_moment"):
+            continue
+        if pv in [
+            "scf_one_electron_energy",
+            "scf_two_electron_energy",
+            "scf_vv10_energy",
+            "scf_xc_energy",
+            "scf_dispersion_correction_energy",
+            "mp2_same_spin_correlation_energy",
+            "mp2_opposite_spin_correlation_energy",
+            "ccsd_same_spin_correlation_energy",
+            "ccsd_opposite_spin_correlation_energy",
+            "ccsd_prt_pr_correlation_energy",
+            "ccsd_prt_pr_total_energy",
+        ]:
+            continue
+        shared_qcvars[pv.upper().replace("_", " ")] = dpv
     qcvars = atres.extras.pop("extra_properties")
     qcvars.pop("return_result")
     qcvars = {k.upper(): p4util.plump_qcvar(k, v) for k, v in qcvars.items()}
-    atres.extras["qcvars"] = qcvars
+    atres.extras["qcvars"] = {**qcvars, **shared_qcvars}
 
     return atres
 
diff --git a/psi4/run_psi4.py b/psi4/run_psi4.py
index 08c1ac071..3e667db79 100755
--- a/psi4/run_psi4.py
+++ b/psi4/run_psi4.py
@@ -118,12 +118,12 @@ args = args.__dict__  # Namespace object seems silly
 executable = Path(__file__).resolve()
 psi4_exe_loc = executable.parent
 
-prefix = Path("@CMAKE_INSTALL_PREFIX@".replace("\\", "/"))
-cmake_install_bindir = "@CMAKE_INSTALL_BINDIR@".replace("\\", "/")
-cmake_install_datadir = "@CMAKE_INSTALL_DATADIR@".replace("\\", "/")
-cmake_install_libdir = "@CMAKE_INSTALL_LIBDIR@".replace("\\", "/")
-pymod_install_libdir = "@PYMOD_INSTALL_LIBDIR@".lstrip("/")
-psi4_install_cmakedir = "@psi4_INSTALL_CMAKEDIR@".replace("\\", "/")
+prefix = Path(r"@CMAKE_INSTALL_PREFIX@".replace("\\", "/"))
+cmake_install_bindir = r"@CMAKE_INSTALL_BINDIR@".replace("\\", "/")
+cmake_install_datadir = r"@CMAKE_INSTALL_DATADIR@".replace("\\", "/")
+cmake_install_libdir = r"@CMAKE_INSTALL_LIBDIR@".replace("\\", "/")
+pymod_install_libdir = r"@PYMOD_INSTALL_LIBDIR@".lstrip("/")
+psi4_install_cmakedir = r"@psi4_INSTALL_CMAKEDIR@".replace("\\", "/")
 full_pymod = (prefix / cmake_install_libdir / pymod_install_libdir / "psi4").resolve()
 full_data = prefix / cmake_install_datadir / "psi4"
 full_bin = prefix / cmake_install_bindir
@@ -186,7 +186,7 @@ if args['plugin_compile']:
         print("""Install "psi4-dev" via `conda install psi4-dev -c psi4[/label/dev]`, then reissue command.""")
 
 if args['psiapi_path']:
-    pyexe_dir = os.path.dirname("@Python_EXECUTABLE@")
+    pyexe_dir = os.path.dirname(r"@Python_EXECUTABLE@")
     print(f"""export PATH={pyexe_dir}:$PATH  # python interpreter\nexport PATH={bin_dir}:$PATH  # psi4 executable\nexport PYTHONPATH={lib_dir}:$PYTHONPATH  # psi4 pymodule""")
     # TODO Py not quite right on conda Windows and Psi include %PREFIX$. but maybe not appropriate for Win anyways
     sys.exit()
-- 
2.40.1

